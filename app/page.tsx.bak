"use client";
import { Input } from "@/components/ui/input";
import {
  Table,
  TableCaption,
  TableHead,
  TableHeader,
  TableBody,
  TableCell,
  TableRow,
} from "@/components/ui/table";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useState, useEffect } from "react";
import { toast } from "sonner";
import { Team, getAllTeams } from "@/lib/services/team-service";

import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import {
  Select,
  SelectTrigger,
  SelectValue,
  SelectContent,
  SelectItem,
} from "@/components/ui/select";

interface EvaluationFieldProps {
  control: any;
  name: string;
}

const EvaluationField = ({ control, name }: EvaluationFieldProps) => (
  <FormField
    control={control}
    name={name}
    render={({ field }) => (
      <Input
        type="number"
        {...field}
        step={0.1}
        min={0}
        max={1}
        onChange={(e) => {
          field.onChange(Number(e.target.value));
        }}
      />
    )}
  />
);

const evaluationCriteria = {
  fondo: ["Responde a la pregunta del debate", "Otras Evaluaion"],
  forma: ["Evaluamos Forma", "Otras Evaluaion"],
  otros: [
    "Equilibrio entre los miembros del equipo",
    <span>
      Actitud de respeto y cordialidad con el otro equipo{" "}
      <span className="font-bold">(x2)</span>
    </span>,
    <span>
      Impresion general del debate <span className="font-bold">(x3)</span>
    </span>,
  ],
};

const formSchema = z.object({
  ronda: z.number(),
  aula: z.number(),
  equipoAF: z.string(),
  equipoEC: z.string(),
  mejorOradorId: z.string().optional(),
  mejorIntoductorId: z.string().optional(),
  mejorR1Id: z.string().optional(),
  mejorR2Id: z.string().optional(),
  mejorConcluId: z.string().optional(),
  fondo: z.object({
    AF: z.array(z.number().min(0).max(1)),
    EC: z.array(z.number().min(0).max(1)),
  }),
  forma: z.object({
    AF: z.array(z.number().min(0).max(1)),
    EC: z.array(z.number().min(0).max(1)),
  }),
  otros: z.object({
    AF: z.array(z.number().min(0).max(1)),
    EC: z.array(z.number().min(0).max(1)),
  }),
});

async function onSubmit(data: z.infer<typeof formSchema>) {
  console.log(data);
  const fondoAF = data.fondo.AF.reduce((a, b) => a + b, 0);
  const fondoEC = data.fondo.EC.reduce((a, b) => a + b, 0);

  const formaAF = data.forma.AF.reduce((a, b) => a + b, 0);
  const formaEC = data.forma.EC.reduce((a, b) => a + b, 0);

  // Calculate otros with hardcoded weights for specific indices
  const otrosAF = data.otros.AF.reduce((total, value, index) => {
    if (index === 1) return total + value * 2; // multiply by 2 for "Actitud de respeto..."
    if (index === 2) return total + value * 3; // multiply by 3 for "Impresion general..."
    return total + value;
  }, 0);

  const otrosEC = data.otros.EC.reduce((total, value, index) => {
    if (index === 1) return total + value * 2; // multiply by 2 for "Actitud de respeto..."
    if (index === 2) return total + value * 3; // multiply by 3 for "Impresion general..."
    return total + value;
  }, 0);

  const totalAF = fondoAF + formaAF + otrosAF;
  const totalEC = fondoEC + formaEC + otrosEC;

  console.log({
    AF: { fondo: fondoAF, forma: formaAF, otros: otrosAF, total: totalAF },
    EC: { fondo: fondoEC, forma: formaEC, otros: otrosEC, total: totalEC },
  });

  // Save to database via API route
  const response = await fetch("/api/debate", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(data),
  });

  if (!response.ok) {
    const errorData = await response.json();
    console.error("API Error:", errorData);
    throw new Error(errorData.error || "Failed to save debate data");
  }

  return await response.json();
}

// Define the TeamMember type with roles
type TeamMember = {
  id: string;
  name: string;
  teamId: string;
  roles: {
    id: string;
    role: string;
    teamType: "AF" | "EC";
  }[];
};

export default function Home() {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [teams, setTeams] = useState<Team[]>([]);
  const [teamMembers, setTeamMembers] = useState<TeamMember[]>([]);

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      ronda: 1,
      aula: 1,
      equipoAF: "",
      equipoEC: "",
      mejorOradorId: "",
      mejorIntoductorId: "",
      mejorR1Id: "",
      mejorR2Id: "",
      mejorConcluId: "",
      fondo: {
        AF: Array(evaluationCriteria.fondo.length).fill(0),
        EC: Array(evaluationCriteria.fondo.length).fill(0),
      },
      forma: {
        AF: Array(evaluationCriteria.forma.length).fill(0),
        EC: Array(evaluationCriteria.forma.length).fill(0),
      },
      otros: {
        AF: Array(evaluationCriteria.otros.length).fill(0),
        EC: Array(evaluationCriteria.otros.length).fill(0),
      },
    },
  });

  useEffect(() => {
    async function fetchTeams() {
      try {
        const teamData = await getAllTeams();
        setTeams(teamData);
      } catch (error) {
        console.error("Failed to fetch teams:", error);
        toast.error("Failed to load teams");
      }
    }

    fetchTeams();
  }, []);

  // Fetch team members when teams are selected
  useEffect(() => {
    async function fetchTeamMembers() {
      const selectedAF = form.getValues("equipoAF");
      const selectedEC = form.getValues("equipoEC");

      if (!selectedAF || !selectedEC) return;

      try {
        const response = await fetch(
          `/api/teams/members?teams=${selectedAF},${selectedEC}`
        );
        if (!response.ok) throw new Error("Failed to fetch team members");
        const data = await response.json();
        setTeamMembers(data.members);
      } catch (error) {
        console.error("Failed to fetch team members:", error);
        toast.error("Failed to load team members");
      }
    }

    fetchTeamMembers();
  }, [form.watch("equipoAF"), form.watch("equipoEC")]);

  // State for role-specific members
  const [roleMembers, setRoleMembers] = useState<{
    INTRO: TeamMember[];
    R1: TeamMember[];
    R2: TeamMember[];
    CONCLU: TeamMember[];
  }>({
    INTRO: [],
    R1: [],
    R2: [],
    CONCLU: [],
  });

  // Filter team members by role when they are loaded
  useEffect(() => {
    if (!teamMembers.length) return;

    // Filter team members by their roles
    const filteredMembers = {
      INTRO: teamMembers.filter((member) =>
        member.roles.some((role) => role.role === "INTRO")
      ),
      R1: teamMembers.filter((member) =>
        member.roles.some((role) => role.role === "R1")
      ),
      R2: teamMembers.filter((member) =>
        member.roles.some((role) => role.role === "R2")
      ),
      CONCLU: teamMembers.filter((member) =>
        member.roles.some((role) => role.role === "CONCLU")
      ),
    };

    setRoleMembers(filteredMembers);
  }, [teamMembers]);

  // Filter team members by role and teamType
  useEffect(() => {
    if (!teamMembers.length) return;

    // Filter team members by their roles and teamType
    const filteredMembers = {
      INTRO: teamMembers.filter((member) =>
        member.roles.some(
          (role) =>
            role.role === "INTRO" &&
            (role.teamType === "AF" || role.teamType === "EC")
        )
      ),
      R1: teamMembers.filter((member) =>
        member.roles.some(
          (role) =>
            role.role === "R1" &&
            (role.teamType === "AF" || role.teamType === "EC")
        )
      ),
      R2: teamMembers.filter((member) =>
        member.roles.some(
          (role) =>
            role.role === "R2" &&
            (role.teamType === "AF" || role.teamType === "EC")
        )
      ),
      CONCLU: teamMembers.filter((member) =>
        member.roles.some(
          (role) =>
            role.role === "CONCLU" &&
            (role.teamType === "AF" || role.teamType === "EC")
        )
      ),
    };

    setRoleMembers(filteredMembers);
  }, [teamMembers]);

  // State for role-specific members
  const [roleMembers, setRoleMembers] = useState<{
    INTRO: TeamMember[];
    R1: TeamMember[];
    R2: TeamMember[];
    CONCLU: TeamMember[];
  }>({
    INTRO: [],
    R1: [],
    R2: [],
    CONCLU: [],
  });

  // Filter team members by role and specific teamType
  useEffect(() => {
    if (!teamMembers.length) return;

    const selectedAF = form.getValues("equipoAF");
    const selectedEC = form.getValues("equipoEC");

    // Filter team members by their role AND the specific team type they're playing in this debate
    const filteredMembers = {
      INTRO: teamMembers.filter((member) =>
        member.roles.some(
          (role) =>
            role.role === "INTRO" &&
            ((member.teamId === selectedAF && role.teamType === "AF") ||
              (member.teamId === selectedEC && role.teamType === "EC"))
        )
      ),
      R1: teamMembers.filter((member) =>
        member.roles.some(
          (role) =>
            role.role === "R1" &&
            ((member.teamId === selectedAF && role.teamType === "AF") ||
              (member.teamId === selectedEC && role.teamType === "EC"))
        )
      ),
      R2: teamMembers.filter((member) =>
        member.roles.some(
          (role) =>
            role.role === "R2" &&
            ((member.teamId === selectedAF && role.teamType === "AF") ||
              (member.teamId === selectedEC && role.teamType === "EC"))
        )
      ),
      CONCLU: teamMembers.filter((member) =>
        member.roles.some(
          (role) =>
            role.role === "CONCLU" &&
            ((member.teamId === selectedAF && role.teamType === "AF") ||
              (member.teamId === selectedEC && role.teamType === "EC"))
        )
      ),
    };

    setRoleMembers(filteredMembers);
  }, [teamMembers, form]);

  // State for role-specific members
  const [roleMembers, setRoleMembers] = useState<{
    INTRO: TeamMember[];
    R1: TeamMember[];
    R2: TeamMember[];
    CONCLU: TeamMember[];
  }>({
    INTRO: [],
    R1: [],
    R2: [],
    CONCLU: [],
  });

  // Filter team members by role and team type
  useEffect(() => {
    if (!teamMembers.length) return;

    const selectedAF = form.getValues("equipoAF");
    const selectedEC = form.getValues("equipoEC");

    // Filter members by their role AND matching team type in this debate
    const filteredMembers = {
      INTRO: teamMembers.filter((member) =>
        member.roles.some(
          (role) =>
            role.role === "INTRO" &&
            ((member.teamId === selectedAF && role.teamType === "AF") ||
              (member.teamId === selectedEC && role.teamType === "EC"))
        )
      ),
      R1: teamMembers.filter((member) =>
        member.roles.some(
          (role) =>
            role.role === "R1" &&
            ((member.teamId === selectedAF && role.teamType === "AF") ||
              (member.teamId === selectedEC && role.teamType === "EC"))
        )
      ),
      R2: teamMembers.filter((member) =>
        member.roles.some(
          (role) =>
            role.role === "R2" &&
            ((member.teamId === selectedAF && role.teamType === "AF") ||
              (member.teamId === selectedEC && role.teamType === "EC"))
        )
      ),
      CONCLU: teamMembers.filter((member) =>
        member.roles.some(
          (role) =>
            role.role === "CONCLU" &&
            ((member.teamId === selectedAF && role.teamType === "AF") ||
              (member.teamId === selectedEC && role.teamType === "EC"))
        )
      ),
    };

    setRoleMembers(filteredMembers);
  }, [teamMembers, form]);

  const handleSubmit = async (values: z.infer<typeof formSchema>) => {
    setIsSubmitting(true);
    try {
      await onSubmit(values);
      toast.success("Evaluación guardada correctamente");
      // Reset form
      form.reset({
        ...form.getValues(),
        fondo: {
          AF: Array(evaluationCriteria.fondo.length).fill(0),
          EC: Array(evaluationCriteria.fondo.length).fill(0),
        },
        forma: {
          AF: Array(evaluationCriteria.forma.length).fill(0),
          EC: Array(evaluationCriteria.forma.length).fill(0),
        },
        otros: {
          AF: Array(evaluationCriteria.otros.length).fill(0),
          EC: Array(evaluationCriteria.otros.length).fill(0),
        },
      });
    } catch (error) {
      toast.error(
        error instanceof Error
          ? error.message
          : "Error al guardar la evaluación"
      );
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Form {...form}>
      <form
        onSubmit={form.handleSubmit(handleSubmit)}
        className="space-y-8 p-4"
      >
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <FormField
            control={form.control}
            name="ronda"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Ronda</FormLabel>
                <FormControl>
                  <Input
                    type="number"
                    min={1}
                    onChange={(e) => {
                      field.onChange(Number(e.target.value));
                    }}
                    value={field.value}
                  />
                </FormControl>
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="aula"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Aula</FormLabel>
                <FormControl>
                  <Input
                    type="number"
                    min={1}
                    onChange={(e) => {
                      field.onChange(Number(e.target.value));
                    }}
                    value={field.value}
                  />
                </FormControl>
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="equipoAF"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Equipo AF</FormLabel>
                <FormControl>
                  <Select onValueChange={field.onChange} value={field.value}>
                    <SelectTrigger>
                      <SelectValue placeholder="Selecciona un equipo" />
                    </SelectTrigger>
                    <SelectContent>
                      {teams.map((team) => (
                        <SelectItem key={team.id} value={team.name}>
                          {team.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </FormControl>
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="equipoEC"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Equipo EC</FormLabel>
                <FormControl>
                  <Select onValueChange={field.onChange} value={field.value}>
                    <SelectTrigger>
                      <SelectValue placeholder="Selecciona un equipo" />
                    </SelectTrigger>
                    <SelectContent>
                      {teams.map((team) => (
                        <SelectItem key={team.id} value={team.name}>
                          {team.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </FormControl>
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="mejorOradorId"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Mejor Orador</FormLabel>
                <FormControl>
                  <Select
                    onValueChange={field.onChange}
                    value={field.value}
                    disabled={teamMembers.length === 0}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Selecciona el mejor orador" />
                    </SelectTrigger>
                    <SelectContent>
                      {teamMembers.map((member) => (
                        <SelectItem key={member.id} value={member.id}>
                          {member.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </FormControl>
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="mejorIntoductorId"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Mejor Introductor</FormLabel>
                <FormControl>
                  <Select
                    onValueChange={field.onChange}
                    value={field.value}
                    disabled={roleMembers.INTRO.length === 0}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Selecciona el mejor introductor" />
                    </SelectTrigger>
                    <SelectContent>
                      {roleMembers.INTRO.map((member) => (
                        <SelectItem key={member.id} value={member.id}>
                          {member.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </FormControl>
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="mejorR1Id"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Mejor R1</FormLabel>
                <FormControl>
                  <Select
                    onValueChange={field.onChange}
                    value={field.value}
                    disabled={roleMembers.R1.length === 0}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Selecciona el mejor R1" />
                    </SelectTrigger>
                    <SelectContent>
                      {roleMembers.R1.map((member) => (
                        <SelectItem key={member.id} value={member.id}>
                          {member.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </FormControl>
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="mejorR2Id"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Mejor R2</FormLabel>
                <FormControl>
                  <Select
                    onValueChange={field.onChange}
                    value={field.value}
                    disabled={roleMembers.R2.length === 0}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Selecciona el mejor R2" />
                    </SelectTrigger>
                    <SelectContent>
                      {roleMembers.R2.map((member) => (
                        <SelectItem key={member.id} value={member.id}>
                          {member.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </FormControl>
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="mejorConcluId"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Mejor Conclusión</FormLabel>
                <FormControl>
                  <Select
                    onValueChange={field.onChange}
                    value={field.value}
                    disabled={roleMembers.CONCLU.length === 0}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Selecciona el mejor conclusor" />
                    </SelectTrigger>
                    <SelectContent>
                      {roleMembers.CONCLU.map((member) => (
                        <SelectItem key={member.id} value={member.id}>
                          {member.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </FormControl>
              </FormItem>
            )}
          />
        </div>

        <Table>
          <TableCaption>Evaluaciones</TableCaption>

          <TableHeader>
            <TableRow>
              <TableHead className="w-[100px]">Fondo</TableHead>
              <TableHead>Equipo AF</TableHead>
              <TableHead>Equipo EC</TableHead>
            </TableRow>
          </TableHeader>

          <TableBody>
            {evaluationCriteria.fondo.map((criterion, index) => (
              <TableRow key={index}>
                <TableCell className="font-medium">{criterion}</TableCell>
                <TableCell>
                  <EvaluationField
                    control={form.control}
                    name={`fondo.AF.${index}`}
                  />
                </TableCell>

                <TableCell>
                  <EvaluationField
                    control={form.control}
                    name={`fondo.EC.${index}`}
                  />
                </TableCell>
              </TableRow>
            ))}
          </TableBody>

          <TableHeader>
            <TableRow>
              <TableHead>Forma</TableHead>
              <TableHead>Equipo AF</TableHead>
              <TableHead>Equipo EC</TableHead>
            </TableRow>
          </TableHeader>

          <TableBody>
            {evaluationCriteria.forma.map((criterion, index) => (
              <TableRow key={index}>
                <TableCell className="font-medium">{criterion}</TableCell>
                <TableCell>
                  <EvaluationField
                    control={form.control}
                    name={`forma.AF.${index}`}
                  />
                </TableCell>

                <TableCell>
                  <EvaluationField
                    control={form.control}
                    name={`forma.EC.${index}`}
                  />
                </TableCell>
              </TableRow>
            ))}
          </TableBody>

          <TableHeader>
            <TableRow>
              <TableHead>Otros Elementos de evaluacion</TableHead>
              <TableHead>Equipo AF</TableHead>
              <TableHead>Equipo EC</TableHead>
            </TableRow>
          </TableHeader>

          <TableBody>
            {evaluationCriteria.otros.map((criterion, index) => (
              <TableRow key={index}>
                <TableCell className="font-medium">{criterion}</TableCell>
                <TableCell>
                  <EvaluationField
                    control={form.control}
                    name={`otros.AF.${index}`}
                  />
                </TableCell>

                <TableCell>
                  <EvaluationField
                    control={form.control}
                    name={`otros.EC.${index}`}
                  />
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
        <Button type="submit" disabled={isSubmitting}>
          {isSubmitting ? "Guardando..." : "Guardar"}
        </Button>
      </form>
    </Form>
  );
}
