// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  
}

enum Role {
  INTRO
  R1
  R2
  CONCLU
  CAPITAN
}

model TeamMember {
  id            String     @id @default(cuid())
  name          String     @db.VarChar(18)
  team          Team       @relation(fields: [teamId], references: [id])
  teamId        String
  roles         TeamRole[]
  mejorOradorIn Result[]   @relation("MejorOrador")
  mejorIntroductorIn Result[]   @relation("MejorIntroductor")
  mejorR1In Result[]   @relation("MejorR1")
  mejorR2In Result[]   @relation("MejorR2")
  mejorConcluIn Result[]   @relation("MejorConclu")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@unique([name, teamId])
}

model TeamRole {
  id        String     @id @default(cuid())
  role      Role
  teamType  TeamType // AF or EC
  member    TeamMember @relation(fields: [memberId], references: [id])
  memberId  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([role, teamType, memberId])
}

model Team {
  id          String       @id @default(cuid())
  name        String       @unique @db.VarChar(18)
  members     TeamMember[]
  debatesAsAF Debate[]     @relation("AFTeam")
  debatesAsEC Debate[]     @relation("ECTeam")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Debate {
  id        String   @id @default(cuid())
  ronda     Int
  aula      Int
  teamAF    Team     @relation("AFTeam", fields: [teamAFId], references: [id])
  teamAFId  String
  teamEC    Team     @relation("ECTeam", fields: [teamECId], references: [id])
  teamECId  String
  results   Result[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([ronda, aula], name: "ronda_aula")
}

model Result {
  id            String       @id @default(cuid())
  debate        Debate       @relation(fields: [debateId], references: [id])
  debateId      String
  evaluations   Evaluation[]

//Mejores Posiciones
  mejorOrador   TeamMember?  @relation("MejorOrador", fields: [mejorOradorId], references: [id])
  mejorIntroductor TeamMember?  @relation("MejorIntroductor", fields: [mejorIntroductorId], references: [id])
  mejorR1 TeamMember?  @relation("MejorR1", fields: [mejorR1Id], references: [id])
  mejorR2 TeamMember?  @relation("MejorR2", fields: [mejorR2Id], references: [id])
  mejorConclu TeamMember?  @relation("MejorConclu", fields: [mejorConcluId], references: [id])
 
  mejorOradorId String?
  mejorIntroductorId String?
  mejorR1Id String?
  mejorR2Id String?
  mejorConcluId String?


  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Evaluation {
  id        String   @id @default(cuid())
  result    Result   @relation(fields: [resultId], references: [id])
  resultId  String
  category  Category
  team      TeamType
  criteria  String
  score     Float
  weight    Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Category {
  FONDO
  FORMA
  OTROS
}

enum TeamType {
  AF
  EC
}

model User {
  id            String    @id @default(cuid()) @map("id")
  name          String    // Required for display purposes
  email         String    @unique // Required for authentication
  emailVerified Boolean   @default(false)
  image         String?   // Optional profile image
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                    String  @id @default(cuid()) @map("id")
  userId                String  @map("user_id")
  accountId             String
  providerId            String
  accessToken           String?   // Optional as it depends on provider
  refreshToken          String?   // Optional as it depends on provider
  accessTokenExpiresAt  DateTime? // Optional as it depends on provider
  refreshTokenExpiresAt DateTime? // Optional as it depends on provider
  scope                 String?   // Optional as it depends on provider
  idToken               String?   // Optional as it depends on provider
  password              String?   // Optional as it's only used for email/password auth
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@unique([providerId, accountId])
}

model Session {
  id         String   @id @default(cuid()) @map("id")
  userId     String   @map("user_id")
  token      String   @unique
  expiresAt  DateTime
  ipAddress  String?  // Optional as it might not always be available
  userAgent  String?  // Optional as it might not always be available
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Verification {
  id         String   @id @default(cuid()) @map("id")
  identifier String   // Required for verification
  value      String   // Required for verification
  expiresAt  DateTime // Required for security
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
}
